include .env.docker

CONTAINER_NAME = $(PROJECT_NAME)-symfony$(SYMFONY_VERSION)-php$(PHP_VERSION)
IMAGE_NAME = php$(PHP_VERSION)-symfony

help:
	@echo "start : Create the container and start the server"
	@echo "stop : Erase the container"
	@echo "restart : Restart the project"
	@echo "shell : Open the shell of the container"

start :
	@if [ -z $$(docker images --quiet $(IMAGE_NAME)) ]; then \
		docker-compose -f ./docker-compose.yml --env-file=.env.docker build php --build-arg PHP_VERSION=$(PHP_VERSION); \
	fi

	@if [ -z $$(docker images --quiet mysql:$(MYSQL_SERVER_VERSION)) ]; then \
		docker-compose -f ./docker-compose.yml --env-file=.env.docker build mysql --build-arg MYSQL_SERVER_VERSION=$(MYSQL_SERVER_VERSION); \
	fi

	@if [ -z $$(docker images --quiet phpmyadmin:$(PHPMYADMIN_VERSION)) ]; then \
		docker-compose -f ./docker-compose.yml --env-file=.env.docker build phpmyadmin --build-arg PHPMYADMIN_VERSION=$(PHPMYADMIN_VERSION); \
	fi

	@docker-compose -f ./docker-compose.yml --env-file=.env.docker up -d --remove-orphans

	@echo "\033[34mStarting server...\033[0m"
	@docker exec $(CONTAINER_NAME) symfony server:start -d > /dev/null 2>&1
	@echo "\033[32mServer started on http://localhost:$(PORT_HOST)\033[0m"

stop :
	@docker-compose -f ./docker-compose.yml --env-file=.env.docker down --remove-orphans

restart : stop start

shell :
	@docker exec -it $(CONTAINER_NAME) /bin/bash
